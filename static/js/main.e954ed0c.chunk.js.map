{"version":3,"sources":["images/bg.jpg","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Info","handleSubmit","a","setShowError","setShowSuccess","email","emailRef","current","value","subject","subjectRef","message","messageRef","isEmail","axios","post","status","useState","showError","showSuccess","useRef","className","type","ref","required","onClick","App","src","background","alt","Form","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,gC,0PCsE5BC,EAlEF,WACT,IAAMC,EAAY,uCAAG,gCAAAC,EAAA,yDACjBC,GAAa,GACbC,GAAe,GAETC,EAAQC,EAASC,QAAQC,MACzBC,EAAUC,EAAWH,QAAQC,MAC7BG,EAAUC,EAAWL,QAAQC,MAEnCF,EAASC,QAAQC,MAAQ,GACzBE,EAAWH,QAAQC,MAAQ,GAC3BI,EAAWL,QAAQC,MAAQ,GAEtBH,GAAUI,GAAYE,GAAYE,IAAQR,GAZ9B,0CAY6CF,GAAa,IAZ1D,mCAeWW,IAAMC,KAAK,uDAAwD,CAAEV,QAAOI,UAASE,YAfhG,WAgBY,MAhBZ,OAgBCK,OAhBD,0CAgBwBZ,GAAe,IAhBvC,QAiBbD,GAAa,GAjBA,mDAmBbC,GAAe,GACfD,GAAa,GApBA,2DAAH,qDADH,EA0BmBc,oBAAS,GA1B5B,mBA0BRC,EA1BQ,KA0BGf,EA1BH,OA2BuBc,oBAAS,GA3BhC,mBA2BRE,EA3BQ,KA2BKf,EA3BL,KA4BTE,EAAWc,mBACXV,EAAaU,mBACbR,EAAaQ,mBAEnB,OACI,oCACI,yBAAKC,UAAU,aACX,gDACA,8BACI,yBAAKA,UAAU,YACX,2BAAOC,KAAK,OAAOC,IAAKjB,EAAUkB,UAAQ,IAC1C,yCAEJ,yBAAKH,UAAU,YACX,2BAAOC,KAAK,OAAOC,IAAKb,EAAYc,UAAQ,IAC5C,2CAEJ,yBAAKH,UAAU,YACX,2BAAOC,KAAK,OAAOC,IAAKX,EAAYY,UAAQ,IAC5C,2CAGHN,GAAc,wBAAIG,UAAU,SAAd,+BACdF,GAAgB,wBAAIE,UAAU,WAAd,4BACjB,uBAAGI,QAAS,kBAAMxB,MACd,+BACA,+BACA,+BACA,+BAJJ,YC1CLyB,EATH,WACV,OACE,yBAAKL,UAAU,OACb,yBAAKM,IAAKC,IAAYC,IAAI,eAC1B,kBAACC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMrC,c","file":"static/js/main.e954ed0c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.5371ea85.jpg\";","import React, { useState, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport isEmail from 'validator/lib/isEmail';\r\n\r\nconst Info = () => {\r\n    const handleSubmit = async () => {\r\n        setShowError(false);\r\n        setShowSuccess(false);\r\n\r\n        const email = emailRef.current.value;\r\n        const subject = subjectRef.current.value;\r\n        const message = messageRef.current.value;\r\n\r\n        emailRef.current.value = ''\r\n        subjectRef.current.value = '';\r\n        messageRef.current.value = '';\r\n\r\n        if (!email || !subject || !message || !isEmail(email)) return setShowError(true);\r\n        \r\n        try {\r\n            const emailSent = await axios.post('https://email-sending-server.herokuapp.com/send-mail', { email, subject, message });\r\n            if (emailSent.status === 200) return setShowSuccess(true);\r\n            setShowError(true);\r\n        } catch {\r\n            setShowSuccess(false);\r\n            setShowError(true);\r\n        }\r\n\r\n    }\r\n\r\n    const [showError, setShowError] = useState(false);\r\n    const [showSuccess, setShowSuccess] = useState(false);\r\n    const emailRef = useRef();\r\n    const subjectRef = useRef();\r\n    const messageRef = useRef();\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"login-box\">\r\n                <h2>Send me an email</h2>\r\n                <form>\r\n                    <div className=\"user-box\">\r\n                        <input type=\"text\" ref={emailRef} required />\r\n                        <label>Email</label>\r\n                    </div>\r\n                    <div className=\"user-box\">\r\n                        <input type=\"text\" ref={subjectRef} required />\r\n                        <label>Subject</label>\r\n                    </div>\r\n                    <div className=\"user-box\">\r\n                        <input type=\"text\" ref={messageRef} required />\r\n                        <label>Message</label>\r\n                    </div>\r\n                    \r\n                    {showError && (<h3 className='error'>Fields are badly formatted!</h3>)}\r\n                    {showSuccess && (<h3 className='success'>Email sent successfully!</h3>)}\r\n                    <a onClick={() => handleSubmit()}>\r\n                        <span></span>\r\n                        <span></span>\r\n                        <span></span>\r\n                        <span></span>\r\n                        Send\r\n                    </a>\r\n                </form>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default Info; ","import React from 'react';\nimport './App.css';\nimport background from './images/bg.jpg';\nimport Form from './components/Form';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <img src={background} alt=\"background\" />\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}